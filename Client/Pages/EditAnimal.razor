
@page "/editAnimal"
@using HealthPetAPP.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager



@if(mostrarFormAnimal)
{

            @if (animal == null)
            {
                 <span>Cargando animal...</span>
            }
else
{
    if(mostrarMensajes)
    {
        <div class="@claseCSS" role="alert">
                @mensajesValidacion
            </div>
    }
                <h3>Mascota </h3>
                <EditForm Model="animal" OnValidSubmit="CreaOActualizaAnimal">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                     <div class="form-group row">
                        <label for="cedulaDueno" class="col-sm-2 col-form-label">C&eacute;dula Dueño</label>
                        <div class="col-sm-4">
                            <InputText @bind-Value="animal.cedulaDueno" class="form-control"@onkeypress="KeyboardEventHandler"></InputText>
                        </div>
                        <button type="button" class="btn btn-primary" @onclick="(() => BuscarAnimal(animal.cedulaDueno))">
                            <span class="icon fa-solid fa-magnifying-glas"></span>
                            Buscar
                    </button>
                        </div>
                      <div class="form-group row">
                        <label for="IdAnimal" class="col-sm-2 col-form-label">Seleccione Mascota</label>
                        <div class="col-sm-4">
                            <InputSelect class="form-control"  ValueExpression="@(()=>animal.IdAnimal)"   Value="@animal.IdAnimal" ValueChanged="@((int value) => OnValueChanged(value))">
                                <option value="0" selected>Seleccione</option>
                                @foreach (var ani in animals)
                                {
                                <option value="@ani.IdAnimal">@ani.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Descripcion" class="col-sm-2 col-form-label">Nombre</label>
                        <div class="col-sm-4">
                            <InputText @bind-Value="animal.Nombre" class="form-control"></InputText>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="IdTipoVuelo" class="col-sm-2 col-form-label">TipoVuelo</label>
                        <div class="col-sm-4">
                            <InputSelect class="form-control" @bind-Value="animal.IdTipoAnimal" @onchange="OnSelectTipoAnimal">
                                <option value="0" selected>Seleccione</option>
                                @foreach (var tipoAnimal in tipoAnimals)
                                {
                                <option value="@tipoAnimal.IdTipoAnimal">@tipoAnimal.Descripcion</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="form-group row">
                        <label for="Edad" class="col-sm-2 col-form-label">Edad</label>
                        <div class="col-sm-4">
                            <InputNumber @bind-Value="animal.Edad" class="form-control"></InputNumber>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Raza" class="col-sm-2 col-form-label">Raza</label>
                        <div class="col-sm-4">
                            <InputText @bind-Value="animal.Raza" class="form-control"></InputText>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">
                            <span class="icon fa-solid fa-plus-square"></span>
                            @MensajeBoton
                    </button>
                     <button type="button" class="btn btn-primary" @onclick="Siguiente">
                            <span class="icon fa-solid fa-angles-right"></span>
                           Siguiente
                    </button>
                     <button class="btn btn-info" id="btn-regresar" @onclick="(() => Regresar())">
                        <span class="icon fa-solid fa-reply"></span>
                        Regresar
                        </button>
                </EditForm>
            }
}
else
{
    <EditCita NombreDueno="@NombreDueno" CedulaDueno="@animal.cedulaDueno" IdAnimal="@animal.IdAnimal" IdDueno="@animal.IdDueno"></EditCita>
}




@code {

    [Parameter]
    public string ced { get; set; }

    [Parameter]
    public int Iddueno { get; set; }

    [Parameter]
    public string NombreDueno { get; set; }

    Animal animal = new Animal();
    private List<Animal> animals = new List<Animal>();
    private List<TipoAnimal> tipoAnimals = new List<TipoAnimal>();
    private string MensajeBoton = "Crear Mascota" ;
    private bool mostrarMensajes= false;
    private string mensajesValidacion = string.Empty;
    private string claseCSS = string.Empty;
    private bool mostrarFormAnimal = true;

    protected override async Task OnInitializedAsync()
    {
        animal.cedulaDueno = ced;
        animal.IdDueno = Iddueno;

        //catalogos

        tipoAnimals = await Http.GetFromJsonAsync<List<TipoAnimal>>($"tipoanimal");


    }


    private async void CreaOActualizaAnimal()
    {
        HttpResponseMessage response;
        try
        {
            ocultarMensajes();
            if (animal.IdAnimal == 0)
            {
                response = await Http.PostAsJsonAsync<Animal>("animal", animal);

                if (response.IsSuccessStatusCode)
                {
                    animal.IdAnimal = await response.Content. ReadFromJsonAsync<int>();

                    Mensaje("Creado con éxito", "alert alert-success col-12");
                }
            }
            else
            {
                response = await Http.PutAsJsonAsync<Animal>("animal", animal);
                if (response.IsSuccessStatusCode)
                {
                    Mensaje("Editado con éxito", "alert alert-success col-12");
                }

            }
            StateHasChanged();
        }
        catch(Exception ex)
        {
            throw;
        }
    }

    private void Siguiente()
    {
        ocultarMensajes();
        if(animal.IdAnimal>0)
        {
            mostrarFormAnimal = false;

            StateHasChanged();
        }
        else
        {
            Mensaje("Debe buscar o crear un(a) mascota para continuar", "alert alert-warning col-12");
        }
    }

    private async void BuscarAnimal(string cedulaDueno)
    {
        try
        {
            ocultarMensajes();
            if (!string.IsNullOrEmpty(cedulaDueno))
            {
                animals = await Http.GetFromJsonAsync<List<Animal>>($"animal/buscarAnimal/{cedulaDueno}");

                if(animals?.Count <=0)
                {
                    animal.cedulaDueno=cedulaDueno;
                    animal.IdDueno = Iddueno;
                    Mensaje("No existe la mascota favor llenar datos", "alert alert-warning col-12");

                }
                else
                {  Mensaje("Seleccione la mascota para completar los datos", "alert alert-success col-12");
                    MensajeBoton = " Editar Mascota";
                }
            }
            else
            {
                mostrarMensajes = true;
                mensajesValidacion = "Debe ingresar una cédula para buscar la mascota";
                claseCSS ="alert alert-danger col-12";
            }   
            StateHasChanged();

        }
        catch (Exception ex)
        {
            animal = new Animal();
        }
    }

    private void ocultarMensajes()
    {
        mostrarMensajes = false;
        mensajesValidacion = string.Empty;
        claseCSS = string.Empty;
    }

    void OnSelectTipoAnimal(ChangeEventArgs e)
    {
        animal.IdTipoAnimal = Convert.ToInt32(e.Value);
    }

    private Task OnValueChanged(int value)
    {
        animal.IdAnimal = value;
        if(animal.IdAnimal >0)
        {
            animal = animals.Where(x => x.IdAnimal == animal.IdAnimal).FirstOrDefault();
            animal.IdDueno = Iddueno;
            StateHasChanged();

        }
        return Task.CompletedTask;

    }

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            BuscarAnimal(animal.cedulaDueno);
    }



    private void Mensaje(string mensaje, string clase, bool mostrar=true)
    {
        mostrarMensajes = mostrar;
        mensajesValidacion = mensaje;
        claseCSS = clase;
    }

       private void Regresar()
    {
        navigationManager.NavigateTo($"buscarCita");
    }


}
